#
# 
# IMPORTANT NOTICE. Even if some parameter is empty, please don't remove it, otherwise program will exit with error.
#
[ROUTER]
# System program, which should be used to connect to a router, it could be nc, telnet, ssh, netcat etc.
cmd = nc
# Router host
host = 192.168.1.1
# Router port
port = 23
# Router admin
# Parameter value for router_admin could be omitted here and could also be stored in the env variable ROUTER_ADMIN.
# If program does not find any value, router admin username will be requested during program startup (could not be used with scheduler). 
# In case when BOTH config and env variables present, config variable will be used.
router_admin = admin
# Router password
# Parameter value for router_pass could be omitted here and could also be stored in the env variable ROUTER_PASS.
# If program does not find any value, router admin password will be requested during program startup (could not be used with scheduler).
# In case when BOTH config and env variables are present, config variable will be used.
router_pass = 
# CLI connection shell command string (pre-built)
# Could be combined with any cmd options and presets above (cmd, host, port, router_admin).
# E.g. for ssh it could be ${cmd} ${router_admin}@{host} -p ${port}
conn_cmd = ${cmd} ${host} ${port}
# Default (fallback) SSID. Will be used if no data for generating random SSID found.
# ssid_default = Qwerty-Pop
ssid_default = 
# Internal name of a device which is responsible for Wi-Fi connections. Could be found using CLI mode.
# wifi_device = WifiMaster0/AccessPoint0
wifi_device =
#
# Router command sequence blocks
#
# Sections should be named as [EXEC_1] .. [EXEC_<N>], where N - sequential integer number (1,2,3,...).
# Execution will automatically stop if the next element in a sequence has not been found.
#
# WARNING! In current implementation there is no 100% guarantee that administration commands 
# were really executed during batch. You can try to check manually (in a CLI mode) what router terminal 
# output strings are responsible for successful command execution and use some of their parts 
# as 'exp' parameters. Anyway, it could appear that due to some reasons SSID was successfully 
# changed, but password - not (or vise-versa). In that case you will have to be ready to fix 
# everything manually.
#
# Each section should have a set of parameters:
#
# 	cmd (string, required) - a configuration command.
# 	exp (string, not required) - what is to 'expect' (program uses pexpect module 
# 		for step-by-step command execution).
# 	append (string, not required) - the name of a paramater which should be appended 
# 		to the command.
# 		Allowed values are "ssid","password".
#
# Example list of commands (for Zyxel Keenetic Lite). Modify for your own router model.
#
# Changing Wi-Fi password.
[EXEC_1]
cmd = interface ${ROUTER:wifi_device} authentication wpa-psk
exp = (config)
append = password
# Changing SSID.
[EXEC_2]
cmd = interface ${ROUTER:wifi_device} ssid
exp = (config)
append = ssid
# Saving configuration.
[EXEC_3]
cmd = system configuration save
exp = (config)
# Exiting router administration mode.
[EXEC_4]
cmd = exit
#
# Post-exec commands
# 
# Basically we need to notify all known Wi-Fi users with the new credentials.
# Program now suggests two ways of doing it: via a Telegram bot, or via email.
# Each pre-configured command should have two specific template vars (in Python 'format' syntax: {} {}).
# E.g. for sending new creds to a Telegram bot, it could look like:
# 'curl -X POST "https://api.telegram.org/bot${telegram_bot_key}/sendMessage" -d "chat_id=${chat_id}&text={}%20{}" -o /dev/null'
# Two '{}' blocks in 'text' parameter will be assigned during program execution with 'newssid' and 'newpass' (w/o secret) correspondingly.
# Same logic could also be used for creating mail notification command.
# See examples below.
#
# All system packages (like curl, mail etc.) needed to execute commands should be installed and configured before program execution.
[POST_EXEC]
#
# Telegram bot cmd configuration 
#
# A key for your Telegram bot.
# telegram_bot_key = EXAMPLE:BOTKEY
telegram_bot_key = 
# Target chat ID
# chat_id = -123123123
chat_id = 
# Bot command
# 
# Example:
# botcmd_tpl = curl -X POST "https://api.telegram.org/bot${telegram_bot_key}/sendMessage" -d "chat_id=${chat_id}&text={}%20{}" -o /dev/null
botcmd_tpl = 
#
# Mail cmd configuration
#
# Note that mail sending environment should be properly configured 
# in order to all receipients receive server notifications.
# Sender address
# sender_email = wifiadmin@somesite.domain
sender_email = 
# A list of Wi-Fi user emails
#email_list = someuser1@somesite.domain,someuser2@somesite.domain
email_list =
# Mail command
# In example below -t option means "read recipients from 'To' header" (could be different on different platforms).
# In case when you send email via a remote server, you can simply pre-configure ssh 
# passwordless authentication using ssh-copy-id, and then use code like "ssh youruser@yourserver 'mail -t <<EOF ...'" as mailcmd_tpl.
# Example (multiline):
# mailcmd_tpl = mail -t <<EOF
#	MIME-Version: 1.0
#	From: ${sender_email}
#	To: ${email_list}
#	Subject: New Wi-Fi credentials example mail
#	Content-Type: text/plain;charset=latin1
#	Content-Transfer-Encoding: 8bit
#
#	{} {}
#	EOF
mailcmd_tpl =
#
# Other parameters
#
[MISC]
# Secret phrase
# If set, program will use it for combining with the Wi-Fi password prefix.
# If empty, program will create the default - two-digit representation of a current date.
# In case when you configured notifications in [POST_EXEC] section above, all recipients should know this phrase.
# Avoid using spaces, non-printable or unicode characters. Recommended characters: [_-0-9A-Za-z%$#@!.*&^].
# The best option could be a text answer for some simple question which everyone from your recipient list knows.
# Spaces could be replaced by _ (underscore) characters.
# Example:
# e.g. an answer for "the breed of our dog?"
# secrer_phrase = husky
# e.g. an answer for "the day we met?"
# secret_phrase = friday
# secret_phrase = 01.07.2025
secret_phrase =
